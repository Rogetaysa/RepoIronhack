-- Write SQL queries to perform the following tasks using the Sakila database:
-- Inicio
USE sakila;
-- 1. List the number of films per category.
SELECT c.name AS category_name, COUNT(f.film_id) AS film_count
FROM category c
JOIN film_category fc ON c.category_id = fc.category_id
JOIN film f ON fc.film_id = f.film_id
GROUP BY c.category_id
ORDER BY film_count DESC;

-- 2. Retrieve the store ID, city, and country for each store.
-- Unir tablas store, address, city y country
SELECT s.store_id, ci.city, co.country
FROM store s
JOIN address a ON s.address_id = a.address_id
JOIN city ci ON a.city_id = ci.city_id
JOIN country co ON ci.country_id = co.country_id;

SELECT * FROM store;

-- 3. Calculate the total revenue generated by each store in dollars.
-- Unir tablas store, payment y customer
SELECT s.store_id, SUM(p.amount) AS total_revenue
FROM store s
JOIN inventory i ON s.store_id = i.store_id
JOIN rental r ON i.inventory_id = r.inventory_id
JOIN payment p ON r.rental_id = p.rental_id
GROUP BY s.store_id;

-- 4. Determine the average running time of films for each category.
SELECT c.name AS category_name, AVG(f.length) AS average_running_time
FROM category c
JOIN film_category fc ON c.category_id = fc.category_id
JOIN film f ON fc.film_id = f.film_id
GROUP BY c.category_id;

-- Bonus:
-- 5. Identify the film categories with the longest average running time.
-- ordenar resultados de antes
SELECT c.name AS category_name, AVG(f.length) AS average_running_time
FROM category c
JOIN film_category fc ON c.category_id = fc.category_id
JOIN film f ON fc.film_id = f.film_id
GROUP BY c.category_id
ORDER BY average_running_time DESC;

-- 6. Display the top 10 most frequently rented movies in descending order.
SELECT f.title, COUNT(r.rental_id) AS rental_count
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
GROUP BY f.film_id
ORDER BY rental_count DESC
LIMIT 10;

-- 7. Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT 
    CASE 
        WHEN i.inventory_id IS NOT NULL THEN 'Available' 
        ELSE 'NOT available' 
    END AS availability
FROM film f
LEFT JOIN inventory i ON f.film_id = i.film_id AND i.store_id = 1
WHERE f.title = 'Academy Dinosaur'
LIMIT 1;

-- 8. Provide a list of all distinct film titles, along with their availability status in the inventory. Include a column indicating whether each title is 'Available' or 'NOT available.' Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."
SELECT 
    f.title, 
    CASE 
        WHEN i.inventory_id IS NOT NULL THEN 'Available' 
        ELSE 'NOT available' 
    END AS availability
FROM film f
LEFT JOIN inventory i ON f.film_id = i.film_id;
